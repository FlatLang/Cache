package flat/cache

import flat/datastruct

class<TKey, TValue> implements CacheStore<TKey, TValue> {
  HashMap<TKey, CacheEntry<TValue>> cache = HashMap()

  public construct(
    visible Serializer serializer,
    visible Deserializer deserializer
  ) {}

  override public invalidate(TKey key) => cache.remove(key)

  override public contains(TKey key) -> Bool {
    if (let entry = cache[key]) {
      return true
    }

    return false
  }

  override public get(TKey key) -> TValue {
    if (let entry = cache[key]) {
      return entry.value
    }

    return null
  }

  override public store(TKey key, TValue value) => value {
    cache[key] = CacheEntry(value)
  }

  static data class CacheEntry<TValue> {
    visible TValue value

  }
}