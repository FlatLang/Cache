package flat/cache

import flat/time
import flat/thread

testable class {
  async test `can create with a default cache store`() {
    let cache = ItemCache.Builder().build()

    cache.store("hey")

    expect(cache.hasValue()).toBe(true)
  }

  async test `can invalidate value in MapCacheStore`() {
    let cache = ItemCache.Builder().withStore(MapCacheStore()).build()

    cache.store("hey")
    cache.invalidate()

    expect(cache.hasValue()).toBe(false)
  }

  async test `getOrStore can get new value`() {
    let cache = ItemCache.Builder().withStore(MapCacheStore()).build()

    expect(cache.getOrStore({ "hey" })).toBe("hey")
    expect(cache.get()).toBe("hey")
  }

  async test `getOrStore does not overwrite valid value`() {
    let cache = ItemCache.Builder().withStore(MapCacheStore()).build()

    cache.store("before")

    expect(cache.getOrStore({ "hey" })).toBe("before")
    expect(cache.get()).toBe("before")
  }

  async test `expires immediately with a lifetime of zero`() {
    let cache = ItemCache.Builder()
      .withLifetime(0)
      .withStore(MapCacheStore())
      .build()

    cache.store("hey")

    expect(cache.hasValue()).toBe(false)
  }

  async test `can access a non-expired a value`() {
    let cache = ItemCache.Builder()
      .withLifetime(100)
      .withStore(MapCacheStore())
      .build()

    cache.store("hey")

    expect(cache.hasValue()).toBe(true)
  }

  async test `can wait until an item expires`() {
    let cache = ItemCache.Builder()
      .withLifetime(100)
      .withStore(MapCacheStore())
      .build()

    cache.store("hey")

    Thread.sleep(110)

    expect(cache.hasValue()).toBe(false)
  }
}
